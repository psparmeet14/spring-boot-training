openapi: 3.0.3 #mandatory root element
info: #provides meta-data about your API | mandatory root element
  title: MyEComApp APIs Definition #mandatory field
  description: |
    # About Us
    **MyEComApp** is an open market product selling company. Any website can list our products by using
    our _APIs_. Shipping & other logistics will be taken care by us. You will get an `Affiliate commission`
    for selling our products.
    ## Categories supported
      - Mobiles
        - Apple
        - Samsung
        - OnePlus
      - Laptops
      - Televisions
      - Headphones
  termsOfService: www.google.com
  contact: 
    name: API Support
    url: https://www.google.com
    email: psparmeet14@gmail.com
  license: 
    name: MyApplication License 2.0 #mandatory field
    url: https://www.google.com 
  version: 0.0.1 #mandatory field
servers: #endpoint url to access consume apis
  - url: https://development.myapplication-server.com/v1 #mandatory field
    description: Development server
  - url: https://staging.myapplication-server.com/v1
    description: Staging server
  - url: https://prod.myapplication-server.com/v1
    description: Production server
  - url: https://{username}.server.com:{port}/{version}
    variables:
      username:
        default: demo
        description: This value is assigned by the service provider.
      port:
        enum:
          - "8443"
          - "443"
        default: "8443"
      version: 
        default: v1
tags:
  - name: Categories
    description: Categories-related operations
  - name: Products
    description: Products-related operations
  - name: Orders
    description: Orders-related operations
  - name: Purchases
    description: Purchases-related operations
paths: #manadatory root element
  /categories:
    get:
      tags:
        - Categories
      summary: List all categories
      description: Returns the list of categories supported by MyEComApp
      parameters:
        - name: categoryId
          in: query
          schema:
            type: integer
            minimum: 100
            maximum: 1000
          examples:
            mobiles:
              summary: Use this example for mobiles
              value: 101
            laptops:
              value: 102
            headphones:
              value: 103
            televisions:
              value: 104
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    categoryId:
                      type: integer
                    name:
                      type: string
              examples:
                all-categories-data:
                  summary: Categories example data
                  value:
                    - categoryId: 101
                      name: Mobiles
                    - categoryId: 102
                      name: Laptops
                    - categoryId: 103
                      name: Headphones
                    - categoryId: 104
                      name: Televisions
                single-category-data:
                  summary: Single category example data
                  value: 
                    - categoryId: 101
                      name: Mobiles
  /categories/{categoryId}:
    get:
      tags:
        - Categories
      summary: List particular category details
      description: Returns the particular category details based on categoryId from MyEComApp
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
            minimum: 100
            maximum: 1000
          example: 201
      responses:
        '200': # OK
          description: A particular category
          content:
            application/json:
              schema:
                type: object
                properties:
                  categoryId:
                    type: integer
                  name:
                    type: string
  /products:
    get:
      tags:
        - Products
      summary: List all products
      description: |
        Returns the list of all the products (or all the products in the specified category) 
        supported by MyEComApp
      parameters:
        - name: categoryId
          in: query
          schema:
            type: integer
            minimum: 100
            maximum: 1000
          example: 201
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    productId:
                      type: integer
                    name:
                      type: string
                    price:
                      type: number
                    categoryName:
                      type: string
                    quantity:
                      type: integer
                      description: |
                        ***Quantity*** represents `stock` value when this field is being sent by 
                        MyEComApp. Whereas in the scenarios of consumer sending this field, it represents
                        `number of product items` inside the order. Consumers are expected to handle
                        the scenario of stopping the end user <u>*when the stock value is 0*</u>
              examples:
                products-data:
                  summary: Products example data
                  value:
                    - productId: 101
                      name: Apple Iphone 14 Pro
                      price: 999.00
                      categoryName: Mobiles
                      quantity: 96
                    - productId: 102
                      name: Samsung S23 Ultra
                      price: 899.00
                      categoryName: Mobiles
                      quantity: 121
                    - productId: 103
                      name: OnePlus 11 Pro 5G
                      price: 750.00
                      categoryName: Mobiles
                      quantity: 67
                      
  /products/{productId}:
    get:
      tags:
        - Products
      summary: Returns product details
      description: |
        Returns the particular product details from MyEComApp
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 1000
          example: 999
      responses:
        '200':
          description: Returns product details
          content:
            application/json:
              schema:
                type: object
                properties:
                  productId:
                    type: integer
                  name: 
                    type: string
                  price:  
                    type: number
                  categoryName:
                    type: string
                  quantity:
                    type: integer
                    description: |
                        ***Quantity*** represents `stock` value when this field is being sent by 
                        MyEComApp. Whereas in the scenarios of consumer sending this field, it represents
                        `number of product items` inside the order. Consumers are expected to handle
                        the scenario of stopping the end user <u>*when the stock value is 0*</u>
  /orders:
    post:
      tags:
        - Orders
      summary: Create order
      description: |
        Post order details to MyEComApp for processing and shipping
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      productId: 
                        type: integer
                      name:
                        type: string
                      price:
                        type: number
                      categoryName:
                        type: string
                      quantity:
                        type: integer
                        description: |
                          ***Quantity*** represents `stock` value when this field is being sent by 
                          MyEComApp. Whereas in the scenarios of consumer sending this field, it represents
                          `number of product items` inside the order. Consumers are expected to handle
                          the scenario of stopping the end user <u>*when the stock value is 0*</u>
                address:
                  type: object
                  properties:
                    addressLine:
                      type: string
                    city:
                      type: string
                    state: 
                      type: string
                    zipCode:
                      type: string
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId:
                    type: integer
    put:
      tags:
        - Orders
      summary: Update order
      description: |
        Update order details to MyEComApp for processing 
        and shipping
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: integer
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      productId: 
                        type: integer
                      name:
                        type: string
                      price:
                        type: number
                      categoryName:
                        type: string
                      quantity:
                        type: integer
                        description: |
                          ***Quantity*** represents `stock` value when this field is being sent by 
                          MyEComApp. Whereas in the scenarios of consumer sending this field, it represents
                          `number of product items` inside the order. Consumers are expected to handle
                          the scenario of stopping the end user <u>*when the stock value is 0*</u>
                address:
                  type: object
                  properties:
                    addressLine:
                      type: string
                    city:
                      type: string
                    state: 
                      type: string
                    zipCode:
                      type: string
      responses:
        '200':
          description: Order updated successfully
    delete:
      tags:
        - Orders
      summary: Delete order
      description: Delete order details from MyEComApp
      parameters:
        - name: orderId
          in: query
          required: true
          schema:
            type: integer
      responses:
        '204': #no content
          description: Order details cancelled successfully
    get:
      tags:
        - Orders
      summary: Get Order details
      description: Returns complete order details from MyEComApp
      parameters:
        - name: orderId
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Fetched the order details successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId:
                    type: integer
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        productId: 
                          type: integer
                        name:
                          type: string
                        price:
                          type: number
                        categoryName:
                          type: string
                        quantity:
                          type: integer
                  address:
                    type: object
                    properties:
                      addressLine:
                        type: string
                      city:
                        type: string
                      state: 
                        type: string
                      zipCode:
                        type: string
  /purchases:
    get:
      tags:
        - Purchases
      summary: List all your purchases
      description: Returns the list of all purchases done by you
      responses:
        '200':
          description: A list of purchases
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    purchaseId: 
                      type: integer
                    articleName:
                      type: string
 

                